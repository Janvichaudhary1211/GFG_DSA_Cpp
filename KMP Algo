/*
Problem Statement: Given two strings, one is a text string txt and the other is a pattern string pat. The task is to print the indexes of all the occurrences of 
the pattern string in the text string. Use 0-based indexing while returning the indices. 
Note: Return an empty list in case of no occurrences of pattern.
*/
class Solution {
  public:
    void computeLPS(string & pat , vector<int> &LPS, int M){
        LPS[0] = 0;
        int len = 0;
        int i= 1;
        while( i < M){
            if(pat[i] == pat[len]){
                len ++;
                LPS[i] = len; 
                i++;
            }else{
                if(len != 0){
                    len = LPS[len - 1];
                }else{
                    LPS[i] = 0;
                    i++;
                }
            }
        }
    }
    vector<int> search(string& pat, string& txt) {
    int N = txt.length();
    int M = pat.length();
    vector<int> result;
    vector<int> LPS(M,0);
    computeLPS(pat , LPS, M);
    int i=0;
    int j=0;
    while(i<N){
        if(txt[i] == pat[j]){
            i++;
            j++;
        }
        if( j == M){
            result.push_back(i-j);
            j= LPS[j-1];
        }else if(pat[j] != txt[i]){
            if( j !=0){
                j = LPS[j-1];
            }else{
                i++;
            }
        }
    }
     return result;   
    }
};
